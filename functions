1. Создайте функцию rgb(), которая будет принимать три числовых аргумента и возвращать строку вида «rgb(23,100,134)».
Если аргументы не заданы, считать их равными нулю.
----
func rgb(a: Int = 0, b: Int = 0, c: Int = 0) -> String {
    
    let rgb = "rgb(\(a), \(b), \(c))"
    return rgb
}

print(rgb(a: 5, b: 44, c: 6))
rgb()
---------------------------------------------------------

2. Создайте функцию имя_функции(число){}, которой на вход передается один параметр - целое число. 
Функция будет печатать:
- "Число делится на 3", если число делится на 3; 
- "Число делится на 5", если число делится на 5;
- "Число делится на 3", "Число делится на 5", если число делится и на 3, на 5;
----
func divisionCheck(_ number: Int) {
    if (number % 3) == 0 { print ("Число делится на 3")}
    if (number % 5) == 0 { print ("Число делится на 5")}
}

divisionCheck(15)
---------------------------------------------------------

3. Создайте функцию корректировки помех. На вход приходит 3 числа: a, b, c. Числа могут быть только 0 или 1. Считаем что либо все числа переданы корректно, либо одно число могло быть передано с ошибкой. Функция возвращает правильное число.
Примеры: Переданы все 0 - функция вернет 0.
Переданы все 1 - функция вернет 1.
Переданы два 0 и одна 1 - функция вернет 0.
Переданы две 1 и один 0 - функция вернет 1.
----
func noiseCorrection(a: Int, b: Int, c: Int) -> Int {
    return (a + b + c) / 2
}

noiseCorrection(a: 0, b: 0, c: 0)
---------------------------------------------------------

4. Создать функцию калькулятор. Передается 3 параметра: a, b и операция над ними.
Возможные операции:
+: сложить a + b
-: вычесть a - b
*: умножить a * b
/: разделить a / b
%: остаток от деления a % b
----
func calculate(num1: Int, num2: Int, oper: String) {
    switch oper {
    case "+":
        print(num1 + num2)
        break
    case "-":
        print(num1 - num2)
        break
    case "*":
        print(num1 * num2)
        break
    case "/":
        print(num1 / num2)
        break
    case "%":
        print(num1 % num2)
        break
    default:
        print("Only number")
        break
    }
}

calculate(num1: 2, num2: 2, oper: "+")
calculate(num1: 3, num2: 4, oper: "-")
calculate(num1: 6, num2: 4, oper: "*")
calculate(num1: 10, num2: 2, oper: "/")
calculate(num1: 4, num2: 2, oper: "%")
----------------------------------------------------------------

5. Создайте функцию, которая принимает в качестве параметров два целых числа (a и b) и выводит на экран все чётные числа из диапазона a...b.
----
func outputEvenNumbersOutOfRange(number1 a: Int, number2 b: Int) -> [Int] {
    var array = [Int]()
    if a < b {
        for i in a...b {
            if i % 2 == 0 {array.append(i)}
        }
    } else {
        for i in b...a {
            if i % 2 == 0 {array.append(i)}
        }
    }
    
    return array
}

outputEvenNumbersOutOfRange(number1: 5, number2: 10)
outputEvenNumbersOutOfRange(number1: 40, number2: 27)
---------------------------------------------------------------

6. Создайте функцию, которая принимает в качестве параметра целое число и возвращает количество цифр в этом числе.
----
func numberOfCharactersInNumber(_ a: Int) -> Int{
    let count: String
    if a < 0 {
        let number = -a
        count = String(number)
    } else {
        count = String(a)
    }
    return count.count
}

numberOfCharactersInNumber(1)
numberOfCharactersInNumber(10)
numberOfCharactersInNumber(109)
numberOfCharactersInNumber(-4)
numberOfCharactersInNumber(-67)
------------------------------------------------------------

7. Создайте функцию, которая принимает в качестве параметра целое число и возвращает сумму его цифр.
----
func sumOfNumbers(_ number: Int) -> Int {
    return String(number).compactMap{Int(String($0))}.reduce(0, +)
}

sumOfNumbers(-112)
sumOfNumbers(55)
sumOfNumbers(32)
------------------------------------------------------------

8.Создайте функцию, которая принимает в качестве параметра целое число и возвращает значение true (истина), если число простое; иначе функция возвращает значение false (ложь).
----
